m<-matrix(1:6, nrow=2, ncol=3)
m
m
clear.function(x)
remove(x)
remove(y)
remove(z)
x<-1:3
y<-10:12
cbind(x,y)
remove(x)
remove(y)
x<-factor(c("yes,"yes","no","yes","no""))
x
x<-factor(c("yes , "yes" , "no" , "yes" , "no"))
x<-factor(c("yes" , "yes" , "no" , "yes" , "no"))
x
table(x)
unclass(x)
levels=c("yes","no")
x
levels=c("yes","no"))
x<-factor(c("yes,"yes","no","yes","no"), levels=c("yes","no"))
x<-factor(c("yes","yes","no","yes","no"), levels=c("yes","no"))
x
z<-c(1,2,NA,3)
Z
z
is.na(x)
is.na(z)
is.nan(z)
n<-data.frame(foo=1:4,bar=c(T,T,F,F))
N
n
nrow(x)
nrow(n)
ncolumn(n)
ncol(n)
x
z
n
remove(x)
names(x)
x<-1:3
names(x)
names(x)<-c("hello","bye","yes")
x
names(x)
u<-list(a=1,b=2,c=3)
u
remove(m)
m<-matrix(1:4, nrow=2, ncol=2)
dimnames(m)<-list(c("a","b), c("c","d"))
dimnames(m)<-list(c("a","b"), c("c","d"))
m
z[1:4]
z
x
x[1:4]
o<-x>"a"
o
remove(n)
remove(x)
remove(o)
remove(z)
remove(m)
remove(n)
remove(n)remove(u)
remove(n), remove(u)
remove(u)
x<-matrix(1:6, 2, 3)
x[1,2]
x[1,3]
x[1,1]
x[1,2]
x[1, ]
x[,2]
remove(x)
x[[name]]
x<-list(food=10,drink=5,wish="nein")
name<-"food"
x[[name]]
x$name
remove(x)
remove(name)
remove(levels)
x<-list(a=list(10,12,14),=c(2.45, 5.64))
x<-list(a= list(10,12,14),b =c(2.45, 5.64))
x[[c(1,3)]]
x[[c(2,2)]]
x[[c(2,3)]]
x<-list(quadratic = 1:20)
x$q
x[["q"]]
x[["q", exact = F]]
remove(x)
x<-c(1,2,3,NA,5,6,NA)
bad<-is.na(x)
x[!bad]
x(!bad)
y<-c("a","b",NA,"d",NA,8,7)
good<-complete.case(c,y)
good<-complete.cases(c,y)
good<-complete.cases(x,y)
good
x[good]
y[good]
load("F:/Plovers/3rd Chapter/input/Madagascar/.RData")
bfa[is.na(bfa$parent),]
table(sex$sex, na.omit=F)
help(table)
table(sex$sex, useNA=]"always")
table(sex$sex, useNA="always")
sex<-sex[!is.na(sex$sex),]
bfa$mol_sex.p1<-NA
bfa$mol_sex.p2<-NA
#a) add mol sex to individuals with rings FH...
letters<-"^[FH0-9]*$"
for(i in 1:length(bfa$year)){ #modification for MAD, search for rings of individuals with code but no ring
print(i)
if(!is.na(bfa$parent1[i]) & grepl(pattern=letters, bfa$parent1[i], perl=T)){
bfa$mol_sex.p1[i] <- sex$sex[match(bfa$parent1[i], sex$ring)]
}
if(!is.na(bfa$parent2[i]) & grepl(pattern=letters, bfa$parent2[i], perl=T)){
bfa$mol_sex.p2[i] <- sex$sex[match(bfa$parent2[i], sex$ring)]
}
}
#b) add mol sex to individuals with no rings
bfa$sp.new.code.p1 <- paste(bfa$species, bfa$new.code.p1, sep="-")
bfa$sp.new.code.p2 <- paste(bfa$species, bfa$new.code.p2, sep="-")
sex$sp.code <- paste(sex$species, sex$ring, sep="-")
for(i in 1:length(bfa$year)){ #modification for MAD, search for rings of individuals with code but no ring
if(is.na(bfa$mol_sex.p1[i]) & !is.na(bfa$new.code.p1[i])){
bfa$mol_sex.p1[i] <- sex$sex[match(bfa$sp.new.code.p1[i], sex$sp.code)]
print(i)
}
if(is.na(bfa$mol_sex.p2[i]) & !is.na(bfa$new.code.p2[i])){
bfa$mol_sex.p2[i] <- sex$sex[match(bfa$sp.new.code.p2[i], sex$sp.code)]
}
}
#---debug 2.--------------------------------------------------------
head(bfa)
str(bfa[is.na(bfa$mol_sex.p1),]) #372 NAs in mol_sex.p1, after sp.code (b) 328 NAs
str(bfa[is.na(bfa$mol_sex.p2),]) #822 NAs in mol_sex.p2, after sp.code (b) 815 NAs
str(bfa[is.na(bfa$mol_sex.p2) & is.na(bfa$mol_sex.p1),]) #334 NAs in both molp1 and molp2, after sp.code (b) 290 NAs
#--------------------------------------------------
#3. Create parent column
#Both parents are present
for(i in 1:length(bfa$year)){
if(!is.na(bfa$parent1[i]) & !is.na(bfa$parent2[i])|
!is.na(bfa$mol_sex.p1[i]) & !is.na(bfa$mol_sex.p2[i])){
bfa$parent[i] <- 4
}
}
bfa[bfa$parent %in% "4",]
bfa[!bfa$parent %in% "4",]
table(bfa$mol_sex.p1)
table(bfa$mol_sex.p2)
#One parent present
for(i in 1:length(bfa$year)){
print(i)
if(!is.na(bfa$mol_sex.p1[i]) & is.na(bfa$mol_sex.p2[i])){
if(bfa$mol_sex.p1[i] %in% "M"){
bfa$parent[i] <- 3
}else{
if(bfa$mol_sex.p1[i] %in% "F"){
bfa$parent[i] <- 2
}
}
}else{
if(!is.na(bfa$mol_sex.p2[i]) & is.na(bfa$mol_sex.p1[i])){
if(bfa$mol_sex.p2[i] %in% "M"){
bfa$parent[i] <- 3
}else{
if(bfa$mol_sex.p2[i] %in% "F"){
bfa$parent[i] <- 2
}
}
}
}
}
str(bfa[is.na(bfa$mol_sex.p1),]) #372 NAs in mol_sex.p1, after sp.code (b) 328 NAs
str(bfa[is.na(bfa$mol_sex.p2),]) #822 NAs in mol_sex.p2, after sp.code (b) 815 NAs
str(bfa[is.na(bfa$mol_sex.p2) & is.na(bfa$mol_sex.p1),]) #334 NAs in both molp1 and molp2, after sp.code (b) 290 NAs
for(i in 1:length(bfa$year)){
if(!is.na(bfa$parent1[i]) & !is.na(bfa$parent2[i])|
!is.na(bfa$mol_sex.p1[i]) & !is.na(bfa$mol_sex.p2[i])){
bfa$parent[i] <- 4
}
}
bfa[bfa$parent %in% "4",]
bfa[!bfa$parent %in% "4",]
table(bfa$mol_sex.p1)
table(bfa$mol_sex.p2)
#One parent present
for(i in 1:length(bfa$year)){
print(i)
if(!is.na(bfa$mol_sex.p1[i]) & is.na(bfa$mol_sex.p2[i])){
if(bfa$mol_sex.p1[i] %in% "M"){
bfa$parent[i] <- 3
}else{
if(bfa$mol_sex.p1[i] %in% "F"){
bfa$parent[i] <- 2
}
}
}else{
if(!is.na(bfa$mol_sex.p2[i]) & is.na(bfa$mol_sex.p1[i])){
if(bfa$mol_sex.p2[i] %in% "M"){
bfa$parent[i] <- 3
}else{
if(bfa$mol_sex.p2[i] %in% "F"){
bfa$parent[i] <- 2
}
}
}
}
}
#---------------------debug
bfa[is.na(bfa$parent1) & !is.na(bfa$parent2),]
head(bfa)
table(bfa$year)
bfa[is.na(bfa$parent),]
table(bfa$parents, useNA="always")
table(bfa$parent, useNA="always")
bfa[is.na(bfa$parent),c("parent1","parent2","mol_sex.p1", "mol_sex.p2", "parent")]
bfa[is.na(bfa$parent),c("parent1","parent2","new.code1","mol_sex.p1", "mol_sex.p2", "parent")]
head(bfa)
bfa[is.na(bfa$parent),c("parent1","parent2","new.code.p1","new.code.p2","mol_sex.p1", "mol_sex.p2", "parent")]
#--------------------------
bfa[is.na(bfa$parent),c("parent1","parent2","new.code.p1","new.code.p2","mol_sex.p1", "mol_sex.p2", "parent")]
head(bfa)
bfa$no_chicks <- apply(bfa[,c("chick1","chick2","chick3")], 1 function(x)
length (which(!is.na(x))))
bfa$no_chicks <- apply(bfa[,c("chick1","chick2","chick3")], 1 function(x)
length
bfa$no_chicks <- apply(bfa[,c("chick1","chick2","chick3")], 1 function(x) length(which(!is.na(x))))
#----------------------WRITE STD FILE
bfa$no_chicks <- apply(bfa[,c("chick1","chick2","chick3")], 1 function(x) length(which(!is.na(x))))
bfa$no_chicks <- apply(bfa[,c("chick1","chick2","chick3")], 1, function(x) length(which(!is.na(x))))
bfa$no_chicks
head(bfa)
setwd("F:/Plovers/3rd Chapter/Exploratory_results/input")
csvfiles <- list.files(path = ".", pattern='*\\.csv$', all.files=TRUE)
csvfiles
import.list <- lapply(csvfiles, read.csv, header = TRUE, as.is=TRUE, na.strings=c("NA"," ",""))
working.list <- import.list[3]
names(working.list) <- c("both")
attach(working.list)
#detach(working.list)
#--------------------------------------------------------------
both0<-both
both<-both0
names(both)
head(both)
str(both)#5143 obs
#--------function to convert dates to juliandates:---------------
datetojulian=function(x,year)    #x has to be a date in the date format %d-%m-%Y
{
origin<-as.Date(paste(year,'-01-01', sep=""))
juliandate<-(x-origin)+1
}
#-------------------------------------------------
#omit next part, Ceuta's file was modified to include this already
#0. Prepare data, Ceuta needs re-naming variables first.res.bs and last.res.bs-----
#
# both[both$population %in% "Ceuta",c("first.res.bs", "first.res","first.d.seen")]
#
# ind<-which(both$population %in% "Ceuta" & both$first.res.bs != both$first.res)
# both[ind,c("first.res.bs", "first.res","first.d.seen")]
#
# both[both$population %in% "Ceuta",c("last.res.bs", "last.res")]
#
# both$first.res[both$population%in%"Ceuta"]<-both$first.res.bs[both$population%in% "Ceuta"]
# both$last.res[both$population %in% "Ceuta"] <- both$last.res.bs[both$population%in%"Ceuta"]
#
# str(both)
# names(both)
# cols <- c(26,27,30,31,55,56)
# both[,cols]<-lapply(both[,cols], as.Date, "%d/%m/%Y") #change columns to dates
#
# str(both[,c("first.res", "last.res","first.cap.r","last.cap.r","first.bf.adult.r", "last.bf.adult.r")])
#
# both$first.d.seen2 <- apply(both[,c("first.res", "last.res","first.cap.r","last.cap.r","first.bf.adult.r", "last.bf.adult.r")],1,function (x) min(x, na.rm=T))
#
# both$last.d.seen2 <- apply(both[,c("first.res", "last.res","first.cap.r","last.cap.r","first.bf.adult.r", "last.bf.adult.r")],1,function (x) max(x, na.rm=T))
#
# both[, c("first.d.seen","first.d.seen2")]
# head(both)
# tail(both)
#---------------------------------------------------
#1. Change data structure-------------
#Each row should be one individual with all it's breeding events per year
both$ring[both$population %in% "Ceuta"] %in% both$ring[both$population %in% "Maio"] #non of the rings in Ceuta are in Maio ,/
both$year.ring <- ifelse(is.na(both$ring) & !is.na(both$code), paste(both$year, both$code, sep="-"), paste(both$year, both$ring, sep="-"))
both$pop.sp <- paste(both$population, both$species, sep="-")
both$nest.id <- paste(both$pop.sp, both$year, both$site, both$nest, sep="-")
head(both[order(both$year.ring),])
both$last.d.seen <- as.Date(both$last.d.seen, "%d/%m/%Y")
both$first.d.seen <- as.Date(both$first.d.seen, "%d/%m/%Y")
both$layingdate <- as.Date(both$layingdate, "%d/%m/%Y")
both$found_date.r <- as.Date(both$found_date.r, "%d/%m/%Y")
both$end_date.r <- as.Date(both$end_date.r, "%d/%m/%Y")
both$ld.minus10<-both$layingdate-10
str(both, list.len=500)
#Restrict dataset to omit cases with no layingdate nor found_date---------
both1<-both[!is.na(both$layingdate) | !is.na(both$found_date.r), ] #102 obs that need to be omitted
str(both1) #5041 ,/ correct number of observations omitting 102 obs with no laying date nor founddate
#And delete duplicated nests:
#------------------------------------------------
#1.a) Variables relevant to all nests: clutch_size and no_chicks
both1$clutch_size1<-NA
both1$clutch_size2<-NA
both1$clutch_size3<-NA
both1$clutch_size4<-NA
both1$fate1<-NA
both1$fate2<-NA
both1$fate3<-NA
both1$fate4<-NA
both1$no_chicks1<-NA
both1$no_chicks2<-NA
both1$no_chicks3<-NA
both1$no_chicks4<-NA
#1.a.i) Use layingdate to order all breeding events of individuals:
both1$jd.idate<- ifelse(!is.na(both1$layingdate), datetojulian(both1$layingdate, both1$year), datetojulian(both1$found_date.r, both1$year)) #julian date of initial date of a nest (using either laying_date or found_date)
#-----------------
i<-which(both1$year.ring %in% "1999-4497")
i<-1
for(i in 1:length(both1$year)){  #for loop brood fates adults
print(i)
#options(warn=1)
options(warn=0)
ind <- which(both1$year.ring[i] == both1$year.ring)
group.nests<-both1[ind,]
group.nests<-group.nests[order(group.nests$jd.idate),]
both1$total.nests.peryear[i] <- length(group.nests$year)
if(length(group.nests$year)==1){
both1$ordinal.nest.peryear[i]<-1
both1$clutch_size1[i]<-group.nests$clutch_size[1]
both1$no_chicks1[i]<-group.nests$no_chicks[1]
both1$fate1[i]<-group.nests$fate[1]
both1$earliest.seen[i] <- min(group.nests$first.d.seen, na.rm=T)
both1$latest.seen[i] <- max(group.nests$last.d.seen, na.rm=T)
both1$min.ldminus10[i] <- min(group.nests$ld.minus10, na.rm=T)
both1$earliest.founddate[i] <- min(group.nests$found_date.r, na.rm=T)
both1$latest.enddate[i] <- max(group.nests$end_date.r, na.rm=T)
both1$min.layingdate[i] <- min(group.nests$layingdate, na.rm=T)
}else{
if(length(group.nests$year)==2){
both1$ordinal.nest.peryear[i]<-ifelse(both1$nest.id[i] %in% group.nests$nest.id[1],1,2)
both1$clutch_size1[i]<-group.nests$clutch_size[1]
both1$clutch_size2[i]<-group.nests$clutch_size[2]
both1$no_chicks1[i]<-group.nests$no_chicks[1]
both1$no_chicks2[i]<-group.nests$no_chicks[2]
both1$fate1[i]<-group.nests$fate[1]
both1$fate2[i]<-group.nests$fate[2]
both1$earliest.seen[i] <- min(group.nests$first.d.seen, na.rm=T)
both1$latest.seen[i] <- max(group.nests$last.d.seen, na.rm=T)
both1$min.ldminus10[i] <- min(group.nests$ld.minus10, na.rm=T)
both1$earliest.founddate[i] <- min(group.nests$found_date.r, na.rm=T)
both1$latest.enddate[i] <- max(group.nests$end_date.r, na.rm=T)
both1$min.layingdate[i] <- min(group.nests$layingdate, na.rm=T)
}else{
if(length(group.nests$year)==3){
both1$ordinal.nest.peryear[i]<-ifelse(both1$nest.id[i] %in% group.nests$nest.id[1], 1,
ifelse(both1$nest.id[i]%in%group.nests$nest.id[2],2,3))
both1$clutch_size1[i]<-group.nests$clutch_size[1]
both1$clutch_size2[i]<-group.nests$clutch_size[2]
both1$clutch_size3[i]<-group.nests$clutch_size[3]
both1$no_chicks1[i]<-group.nests$no_chicks[1]
both1$no_chicks2[i]<-group.nests$no_chicks[2]
both1$no_chicks3[i]<-group.nests$no_chicks[3]
both1$fate1[i]<-group.nests$fate[1]
both1$fate2[i]<-group.nests$fate[2]
both1$fate3[i]<-group.nests$fate[3]
both1$earliest.seen[i] <- min(group.nests$first.d.seen, na.rm=T)
both1$latest.seen[i] <- max(group.nests$last.d.seen, na.rm=T)
both1$min.ldminus10[i] <- min(group.nests$ld.minus10, na.rm=T)
both1$earliest.founddate[i] <- min(group.nests$found_date.r, na.rm=T)
both1$latest.enddate[i] <- max(group.nests$end_date.r, na.rm=T)
both1$min.layingdate[i] <- min(group.nests$layingdate, na.rm=T)
}else{
if(length(group.nests$year)==4){
both1$ordinal.nest.peryear[i]<-ifelse(both1$nest.id[i] %in% group.nests$nest.id[1], 1,
ifelse(both1$nest.id[i]%in%group.nests$nest.id[2],2,
ifelse(both1$nest.id[i]%in%group.nests$nest.id[3],3,4)))
both1$clutch_size1[i]<-group.nests$clutch_size[1]
both1$clutch_size2[i]<-group.nests$clutch_size[2]
both1$clutch_size3[i]<-group.nests$clutch_size[3]
both1$clutch_size4[i]<-group.nests$clutch_size[4]
both1$no_chicks1[i]<-group.nests$no_chicks[1]
both1$no_chicks2[i]<-group.nests$no_chicks[2]
both1$no_chicks3[i]<-group.nests$no_chicks[3]
both1$no_chicks4[i]<-group.nests$no_chicks[4]
both1$fate1[i]<-group.nests$fate[1]
both1$fate2[i]<-group.nests$fate[2]
both1$fate3[i]<-group.nests$fate[3]
both1$fate4[i]<-group.nests$fate[4]
both1$earliest.seen[i] <- min(group.nests$first.d.seen, na.rm=T)
both1$latest.seen[i] <- max(group.nests$last.d.seen, na.rm=T)
both1$min.ldminus10[i] <- min(group.nests$ld.minus10, na.rm=T)
both1$earliest.founddate[i] <- min(group.nests$found_date.r, na.rm=T)
both1$latest.enddate[i] <- max(group.nests$end_date.r, na.rm=T)
both1$min.layingdate[i] <- min(group.nests$layingdate, na.rm=T)
}
}
}
}
}
#----------------------------------------------
#Easier to extract earliest and latest date per individual per year...
#Use similar for loop used to extract brood fate dates in extract_breedingschedule.R:
#
#
# for(i in 1:length(both$year)){  #for loop brood fates adults
#   print(i)
#   #options(warn=1)
#   options(warn=0)
#   ind <- which(both$year.ring[i] == both$year.ring)
#   group.nests<-both[ind,]
#
#   #both$total.nests.peryear[i] <- length(group.nests$year)
#   both$earliest.seen[i] <- min(group.nests$first.d.seen2, na.rm=T)
#   both$latest.seen[i] <- max(group.nests$last.d.seen2, na.rm=T)
#   both$min.ldminus10[i] <- min(group.nests$ld.minus10, na.rm=T)
#   both$earliest.founddate[i] <- min(group.nests$found_date.r, na.rm=T)
#   both$latest.enddate[i] <- max(group.nests$end_date.r, na.rm=T)
#   both$min.layingdate[i] <- min(group.nests$layingdate, na.rm=T)
# }
#change to dates:
both2<-both1
names(both2)
cols <- c(118:123)
both2[,cols]<-lapply(both2[,cols], as.Date, origin="1970-01-01") #change columns to dates
str(both2, list.len = 999)
str(both, list.len = 999)
#-----------debug------
unique(both1$year.ring) #4465 nests with ordinal.nest.peryear ==1 should be equal to this number:
un.ids<-both2[both2$ordinal.nest.peryear==1,]
unique(both1$year.ring) #4465 nests with ordinal.nest.peryear ==1 should be equal to this number:
str(both2[both2$ordinal.nest.peryear==1,]) #4469....4 more...why?
ind<-which(duplicated(un.ids$year.ring)|duplicated(un.ids$year.ring, fromLast=T))
un.ids[ind,"nest.id"]
ind<-sample(rownames(un.ids),10)
un.ids[ind,]
names(both2)
cols <- c(115:120)
both2[,cols]<-lapply(both2[,cols], as.Date, origin="1970-01-01") #change columns to dates
un.ids<-both2[both2$ordinal.nest.peryear==1,]
ind<-sample(rownames(un.ids),10)
un.ids[ind,]
both<-un.ids
ind <- which(duplicated(both$year.ring) | duplicated(both$year.ring, fromLast=TRUE))
ind
str(both) #2114
indiv<-un.ids
for(i in 1:length(indiv$year.ring)){  #for loop brood fates adults
print(i)
options(warn=1)
bs.start.df <- indiv[i,c("earliest.seen","min.ldminus10","earliest.founddate")]
indiv$bs.start[i] <- apply(bs.start.df, 1, function(x) min(x, na.rm=T))
indiv$bs.start.which[i] <- colnames(bs.start.df)[apply(bs.start.df,1, function(x) which(x==min(x, na.rm=T)))]
bs.end.df <- indiv[i, c("latest.seen","latest.enddate","min.ldminus10","earliest.founddate")]
indiv$bs.end[i] <- apply(bs.end.df, 1, function(x) max(x, na.rm=T))
indiv$bs.end.which[i] <- colnames(bs.end.df)[apply(bs.end.df, 1, function(x) which(x==max(x, na.rm=T)))]
}
i<-4452
bs.start.df <- indiv[i,c("earliest.seen","min.ldminus10","earliest.founddate")]
bs.start.df
apply(bs.start.df, 1, function(x) min(x, na.rm=T))
colnames(bs.start.df)[apply(bs.start.df,1, function(x) which(x==min(x, na.rm=T)))]
bs.end.df <- indiv[i, c("latest.seen","latest.enddate","min.ldminus10","earliest.founddate")]
bs.end.df
apply(bs.end.df, 1, function(x) max(x, na.rm=T))
colnames(bs.end.df)[apply(bs.end.df, 1, function(x) which(x==max(x, na.rm=T)))]
indiv$bs.end.which[i]
i<-4429
indiv$bs.start
indiv$bs.start<-as.Date(indiv$bs.start, "%Y-%m-%d")
indiv$bs.end
indiv$bs.end<-as.Date(indiv$bs.end, "%Y-%m-%d")
head(indiv)
indiv$bs.length <- as.numeric(indiv$bs.end - indiv$bs.start)
str(indiv[indiv$bs.length ==0,]) #seen once and layingdates not known, only bred once in a year = 9 obs
u1<-indiv[indiv$mol_sex_focal == indiv$mol_sex_mate & !is.na(indiv$year.ring),]
u1<-u1[!is.na(u1$year.ring),]
u1
str(u1)
table(u1$population)
u1<-indiv[indiv$mol_sex_focal == indiv$mol_sex_mate & !is.na(indiv$year.ring),]
str(u1)
head(u1)
u1<-u1[!is.na(u1$population),] #89 cases where mol_sex_focal is equal to mol_sex_mate
head(u1)
str(u1)
u1<-u1[!is.na(u1$population),] #89 cases where mol_sex_focal is equal to mol_sex_mate
table(u1$population)
indiv$sex.reliable<-ifelse(indiv$year.ring %in% u1$year.ring, "conflicting sex", NA)
indiv$sex.reliable
str(indiv[indiv$sex.reliable %in% "conflicting sex",])
head(indiv)
table(indiv$year)
ind<-which(indiv$year.cr < indiv$year)
ringed.prev<-indiv[ind,]
str(ringed.prev) #654
table(indiv$mol_sex_focal) #without restricting to indiv ringed in previous year
help(table)
table(indiv$mol_sex_focal, useNA="always") #without restricting to indiv ringed in previous year
indiv2<-indiv[!is.na(indiv$mol_sex_focal),] #only indiv with mol_sex
str(indiv2)#1104
table(ringed.prev$mol_sex_focal) #restricting to indiv ringed in previous year
table(ringed.prev$mol_sex_focal, useNA="always") #restricting to indiv ringed in previous year
length(ringed.prev$mol_sex_focal) #654
